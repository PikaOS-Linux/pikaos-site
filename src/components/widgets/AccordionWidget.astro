---
type Props = {
  title: string;
  description: string;
};
const { title, description } = Astro.props;
---

<accordion-widget
  class="w-full rounded-lg border block overflow-hidden transition-height duration-200 relative px-2 py-2 dark:bg-slate-800"
>
  <button
    class="w-full text-center md:text-start accordion flex flex-row gap-x-1 py-1 justify-between items-center"
  >
    <h3 class="hed w-full font-bold pointer-events-none">
      {title}
    </h3>
    <div
      class="chev pointer-events-none transition-transform duration-200 shrink-0 h-4 w-4"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="shrink md:h-4 fill-slate-800 dark:fill-white transition-transform duration-500 ease-in-out pointer-events-none"
        viewBox="0 0 384 512"
      >
        <path
          d="M169.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 274.7 54.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"
        ></path></svg
      >
    </div>
  </button>
  <p class="text-center md:text-start absolute pointer-events-none">
    {description}
  </p>
</accordion-widget>

<script>
  class AccordionWidget extends HTMLElement {
    top: HTMLElement;
    bottom: HTMLElement;
    chev: HTMLElement;
    padding = 22;
    topPadding = 15;

    constructor() {
      super();
      this.top = this.querySelector(".accordion") || new HTMLElement();
      this.bottom = this.querySelector("p") || new HTMLElement();
      this.chev = this.top.querySelector(".chev") || new HTMLElement();
      this.addEventListener("click", () => {
        this.toggleOpen();
      });
      window.addEventListener("resize", () => {
        this.setInitialHeight();
        this.chev.classList.remove("rotate-180");
      });
      this.setInitialHeight();
    }

    toggleOpen() {
      requestAnimationFrame(() => {
        const nextHeight = this.bottom.clientHeight;
        const targetHeight = this.top.clientHeight;
        const parentHeight = this.clientHeight;
        this.style.height =
        parentHeight >= targetHeight + nextHeight
            ? targetHeight + this.padding + "px"
            : targetHeight + nextHeight + this.padding +"px";
        this.bottom.style.top = targetHeight + this.topPadding + "px";
        this.chev.classList.toggle("rotate-180");
      });
    }

    setInitialHeight() {
      requestAnimationFrame(() => {
        this.style.height =  this.top.clientHeight + this.padding + "px"
        this.bottom.style.top = this.top.clientHeight + this.topPadding + "px";
      });
    }
  }

  customElements.define("accordion-widget", AccordionWidget);
</script>
