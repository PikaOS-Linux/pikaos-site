---
type Props = {
  title: string;
  description: string;
};
const { title, description } = Astro.props;
---

<accordion-widget class="w-full rounded-lg border block overflow-hidden closed transition-height duration-200 relative px-2 py-2 dark:bg-slate-800">
  <button class="w-full text-center md:text-start accordion flex flex-row gap-x-1 py-1 justify-between items-center">
    <h3 class="hed w-full font-bold pointer-events-none">
      {title}
    </h3>
    <div class="chev pointer-events-none transition-transform duration-200 shrink-0 h-4 w-4">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="shrink md:h-4 fill-slate-800 dark:fill-white transition-transform duration-500 ease-in-out pointer-events-none"
        viewBox="0 0 384 512"
      >
        <path
          d="M169.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 274.7 54.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z"
        ></path></svg
      >
    </div>
  </button>
  <p style="top: 50px" class="text-center md:text-start absolute pointer-events-none">
    {description}
  </p>
</accordion-widget>

<script>
  class AccordionWidget extends HTMLElement {
    constructor() {
      super();
      this.addEventListener("click", (event) => {
        const target = event.target as HTMLElement;
        const parent = target.parentNode as HTMLElement;
        const next = target.nextElementSibling as HTMLElement;
        const nextHeight = next.getBoundingClientRect().height;
        parent.style.height = parent.style.height ? "" : 58 + nextHeight + "px";
        parent.classList.toggle("closed");
        target.querySelector(".chev")?.classList.toggle("rotate-180");
      });
    }
  }

  customElements.define("accordion-widget", AccordionWidget);
</script>

<style>
  .closed {
    height: 58px;
  }
</style>
